"""
·ª®ng d·ª•ng Demo Ph√°t hi·ªán Gian l·∫≠n Th·∫ª T√≠n d·ª•ng b·∫±ng Machine Learning

·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng Streamlit ƒë·ªÉ t·∫°o giao di·ªán t∆∞∆°ng t√°c cho ph√©p ng∆∞·ªùi d√πng:
- Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu m·∫•t c√¢n b·∫±ng (Original, Oversampling, SMOTE)
- Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m√¥ h√¨nh ML ƒë·ªÉ hu·∫•n luy·ªán v√† so s√°nh
- Xem k·∫øt qu·∫£ chi ti·∫øt v√† so s√°nh hi·ªáu su·∫•t c√°c m√¥ h√¨nh

Ng√†y t·∫°o: 2025
Phi√™n b·∫£n Python: 3.11
"""

import sys
import os

# Th√™m th∆∞ m·ª•c src v√†o Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import streamlit as st
import pandas as pd
import numpy as np

# Import c√°c module t·ª± t·∫°o
from src.data_processing import (
    load_data, 
    get_data_info, 
    prepare_data, 
    process_data_by_method
)
from src.models import train_and_evaluate_models, get_best_model
from src.visualization import (
    plot_confusion_matrix,
    create_metrics_dataframe,
    display_metrics_summary,
    plot_comparison_chart,
    display_data_info,
    get_recommendation,
    create_detailed_metrics_table
)


# ==================== C·∫•u h√¨nh trang ====================
st.set_page_config(
    page_title="Ph√°t hi·ªán Gian l·∫≠n Th·∫ª T√≠n d·ª•ng",
    page_icon="üí≥",
    layout="wide",
    initial_sidebar_state="expanded"
)


# ==================== CSS t√πy ch·ªânh ====================
st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        padding: 1rem;
        background: linear-gradient(90deg, #e3f2fd 0%, #bbdefb 100%);
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #555;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stButton>button {
        width: 100%;
        background-color: #1f77b4;
        color: white;
        font-size: 1.1rem;
        font-weight: bold;
        padding: 0.75rem;
        border-radius: 8px;
        border: none;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #155a8a;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    div[data-testid="stMetricValue"] {
        font-size: 1.5rem;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)


# ==================== Header ====================
st.markdown('<div class="main-header">Ph√°t hi·ªán Gian l·∫≠n Th·∫ª T√≠n d·ª•ng b·∫±ng Machine Learning</div>', 
            unsafe_allow_html=True)
st.markdown('<div class="sub-header">Demo ·ª©ng d·ª•ng h·ªçc m√°y ƒë·ªÉ ph√°t hi·ªán gian l·∫≠n v√† so s√°nh hi·ªáu qu·∫£ c√°c m√¥ h√¨nh</div>', 
            unsafe_allow_html=True)


# ==================== Sidebar - B·∫£ng ƒëi·ªÅu khi·ªÉn ====================
st.sidebar.title("B·∫£ng ƒëi·ªÅu khi·ªÉn")
st.sidebar.markdown("---")

# B∆∞·ªõc 1: Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu
st.sidebar.subheader("B∆∞·ªõc 1: Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu")
data_processing_method = st.sidebar.selectbox(
    "Ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu m·∫•t c√¢n b·∫±ng:",
    [
        'D·ªØ li·ªáu g·ªëc (M·∫•t c√¢n b·∫±ng)',
        'X·ª≠ l√Ω b·∫±ng Oversampling',
        'X·ª≠ l√Ω b·∫±ng SMOTE'
    ],
    help="Ch·ªçn ph∆∞∆°ng ph√°p ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu m·∫•t c√¢n b·∫±ng trong t·∫≠p hu·∫•n luy·ªán"
)

# Hi·ªÉn th·ªã m√¥ t·∫£ ph∆∞∆°ng ph√°p
method_descriptions = {
    'D·ªØ li·ªáu g·ªëc (M·∫•t c√¢n b·∫±ng)': """
    **D·ªØ li·ªáu g·ªëc (Imbalanced Data)**
    
    S·ª≠ d·ª•ng d·ªØ li·ªáu g·ªëc kh√¥ng qua x·ª≠ l√Ω. T·∫≠p d·ªØ li·ªáu c√≥ t·ª∑ l·ªá gian l·∫≠n ch·ªâ 0.172%, 
    r·∫•t m·∫•t c√¢n b·∫±ng gi·ªØa l·ªõp gian l·∫≠n v√† l·ªõp h·ª£p ph√°p.
    
    ‚ö†Ô∏è C√≥ th·ªÉ d·∫´n ƒë·∫øn m√¥ h√¨nh thi√™n v·ªã v·ªÅ l·ªõp ƒëa s·ªë (h·ª£p ph√°p).
    """,
    'X·ª≠ l√Ω b·∫±ng Oversampling': """
    **Random Oversampling**
    
    L·∫∑p l·∫°i ng·∫´u nhi√™n c√°c m·∫´u gian l·∫≠n (minority class) ƒë·ªÉ c√¢n b·∫±ng v·ªõi l·ªõp ƒëa s·ªë.
    
    ‚úÖ ƒê∆°n gi·∫£n v√† nhanh ch√≥ng.
    ‚ö†Ô∏è C√≥ th·ªÉ g√¢y overfitting do l·∫∑p l·∫°i ch√≠nh x√°c c√°c m·∫´u.
    """,
    'X·ª≠ l√Ω b·∫±ng SMOTE': """
    **SMOTE (Synthetic Minority Oversampling Technique)**
    
    T·∫°o ra c√°c m·∫´u gian l·∫≠n t·ªïng h·ª£p b·∫±ng c√°ch n·ªôi suy gi·ªØa c√°c m·∫´u gian l·∫≠n hi·ªán c√≥.
    
    ‚úÖ T·∫°o ra d·ªØ li·ªáu ƒëa d·∫°ng h∆°n, gi·∫£m overfitting.
    ‚úÖ Th∆∞·ªùng cho k·∫øt qu·∫£ t·ªët h∆°n Random Oversampling.
    """
}

st.sidebar.info(method_descriptions[data_processing_method])

st.sidebar.markdown("---")

# B∆∞·ªõc 2: Ch·ªçn m√¥ h√¨nh
st.sidebar.subheader("B∆∞·ªõc 2: Ch·ªçn m√¥ h√¨nh h·ªçc m√°y")
selected_models = st.sidebar.multiselect(
    "Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m√¥ h√¨nh ƒë·ªÉ hu·∫•n luy·ªán:",
    [
        'H·ªìi quy Logistic',
        'C√¢y quy·∫øt ƒë·ªãnh',
        'M·∫°ng Bayesian',
    ],
    default=['H·ªìi quy Logistic', 'C√¢y quy·∫øt ƒë·ªãnh'],
    help="Ch·ªçn c√°c m√¥ h√¨nh b·∫°n mu·ªën hu·∫•n luy·ªán v√† so s√°nh"
)

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m√¥ h√¨nh
if selected_models:
    with st.sidebar.expander("Th√¥ng tin v·ªÅ c√°c m√¥ h√¨nh ƒë√£ ch·ªçn"):
        for model in selected_models:
            if model == 'H·ªìi quy Logistic':
                st.markdown("**H·ªìi quy Logistic:** M√¥ h√¨nh tuy·∫øn t√≠nh s·ª≠ d·ª•ng h√†m sigmoid.")
            elif model == 'C√¢y quy·∫øt ƒë·ªãnh':
                st.markdown("**C√¢y quy·∫øt ƒë·ªãnh:** M√¥ h√¨nh phi tuy·∫øn t·∫°o c·∫•u tr√∫c c√¢y.")
            elif model == 'M·∫°ng Bayesian':
                st.markdown("**M·∫°ng Bayesian:** S·ª≠ d·ª•ng ƒë·ªãnh l√Ω Bayes (Gaussian NB).")

st.sidebar.markdown("---")

# B∆∞·ªõc 3: N√∫t th·ª±c thi
st.sidebar.subheader("B∆∞·ªõc 3: Th·ª±c thi")
run_button = st.sidebar.button("Hu·∫•n luy·ªán v√† ƒê√°nh gi√°", type="primary")

# Th√¥ng tin b·ªï sung
st.sidebar.markdown("---")
st.sidebar.markdown("""
### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu
2. Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m√¥ h√¨nh
3. Nh·∫•n n√∫t "Hu·∫•n luy·ªán v√† ƒê√°nh gi√°"
4. Xem k·∫øt qu·∫£ v√† so s√°nh

### Dataset:
- **Ngu·ªìn:** Kaggle Credit Card Fraud Detection
- **T·ªïng giao d·ªãch:** 284,807
- **Giao d·ªãch gian l·∫≠n:** 492 (0.172%)
""")


# ==================== Main Area ====================

# Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ch∆∞a ch·ªçn m√¥ h√¨nh
if not selected_models:
    st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√¥ h√¨nh ·ªü thanh b√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
    st.stop()

# Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t
if run_button:
    with st.spinner("üîÑ ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
        # T·∫£i d·ªØ li·ªáu
        df = load_data()
        
        if df is None:
            st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet ho·∫∑c t·∫£i d·ªØ li·ªáu th·ªß c√¥ng.")
            st.stop()
        
        # L·∫•y th√¥ng tin d·ªØ li·ªáu g·ªëc
        data_info = get_data_info(df)
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu (chia train/test)
        X_train, X_test, y_train, y_test = prepare_data(df)
        
        # X·ª≠ l√Ω d·ªØ li·ªáu theo ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn
        X_train_processed, y_train_processed, method_info = process_data_by_method(
            data_processing_method, X_train, y_train
        )
    
    # Hi·ªÉn th·ªã th√¥ng tin d·ªØ li·ªáu
    st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng!")
    display_data_info(data_info, method_info)
    
    st.markdown("---")
    
    # Hu·∫•n luy·ªán c√°c m√¥ h√¨nh
    st.subheader("Hu·∫•n luy·ªán v√† ƒê√°nh gi√° c√°c M√¥ h√¨nh")
    
    trained_models = train_and_evaluate_models(
        selected_models,
        X_train_processed,
        y_train_processed,
        X_test,
        y_test
    )
    
    st.success(f"ƒê√£ ho√†n th√†nh hu·∫•n luy·ªán {len(trained_models)} m√¥ h√¨nh!")
    
    st.markdown("---")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt cho t·ª´ng m√¥ h√¨nh
    st.subheader("K·∫øt qu·∫£ Chi ti·∫øt t·ª´ng M√¥ h√¨nh")
    
    for i, model in enumerate(trained_models):
        with st.expander(f"{model.model_name}", expanded=(i == 0)):
            # Hi·ªÉn th·ªã metrics summary
            display_metrics_summary(model)
            
            st.markdown("---")
            
            # T·∫°o 2 c·ªôt: confusion matrix v√† chi ti·∫øt
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.markdown("**Confusion Matrix:**")
                fig_cm = plot_confusion_matrix(
                    model.metrics['confusion_matrix'],
                    model.model_name
                )
                st.pyplot(fig_cm)
            
            with col2:
                st.markdown("**Chi ti·∫øt Metrics:**")
                metrics = model.metrics
                
                metrics_df = pd.DataFrame({
                    'Metric': [
                        'True Negative (TN)',
                        'False Positive (FP)',
                        'False Negative (FN)',
                        'True Positive (TP)',
                        'Accuracy',
                        'Precision',
                        'Recall',
                        'F1-Score'
                    ],
                    'Value': [
                        f"{metrics['true_negative']:,}",
                        f"{metrics['false_positive']:,}",
                        f"{metrics['false_negative']:,}",
                        f"{metrics['true_positive']:,}",
                        f"{metrics['accuracy']*100:.2f}%",
                        f"{metrics['precision']*100:.2f}%",
                        f"{metrics['recall']*100:.2f}%",
                        f"{metrics['f1_score']*100:.2f}%"
                    ]
                })
                
                st.dataframe(metrics_df, width='stretch', hide_index=True)
    
    st.markdown("---")
    
    # B·∫£ng so s√°nh t·ªïng h·ª£p
    st.subheader("B·∫£ng So s√°nh T·ªïng h·ª£p")
    
    comparison_df = create_detailed_metrics_table(trained_models)
    
    # Hi·ªÉn th·ªã b·∫£ng v·ªõi styling
    st.dataframe(
        comparison_df,
        width='stretch',
        hide_index=True
    )
    
    # Th√™m ghi ch√∫
    st.caption("""
    **Ghi ch√∫:** 
    - **TP (True Positive):** Giao d·ªãch gian l·∫≠n ƒë∆∞·ª£c ph√°t hi·ªán ƒë√∫ng - C√†ng cao c√†ng t·ªët
    - **FP (False Positive):** Giao d·ªãch h·ª£p ph√°p b·ªã nh·∫≠n di·ªán nh·∫ßm - C√†ng th·∫•p c√†ng t·ªët
    - **TN (True Negative):** Giao d·ªãch h·ª£p ph√°p ƒë∆∞·ª£c ph√°t hi·ªán ƒë√∫ng
    - **FN (False Negative):** Giao d·ªãch gian l·∫≠n b·ªã b·ªè s√≥t - C√†ng th·∫•p c√†ng t·ªët
    """)
    
    st.markdown("---")
    
    # Bi·ªÉu ƒë·ªì so s√°nh
    if len(trained_models) > 1:
        st.subheader("Bi·ªÉu ƒë·ªì So s√°nh")
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_f1 = plot_comparison_chart(trained_models, 'f1_score')
            st.pyplot(fig_f1)
        
        with col2:
            fig_recall = plot_comparison_chart(trained_models, 'recall')
            st.pyplot(fig_recall)
        
        st.markdown("---")
    
    # Khuy·∫øn ngh·ªã
    recommendation = get_recommendation(trained_models, data_processing_method)
    st.markdown(recommendation)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #888; padding: 2rem;'>
        <p>ƒê·ªì √°n: Ph√°t hi·ªán Gian l·∫≠n Th·∫ª T√≠n d·ª•ng b·∫±ng Machine Learning</p>
        <p>Dataset: Credit Card Fraud Detection - Kaggle</p>
        <p>C√¥ng ngh·ªá: Python 3.14 | Streamlit | Scikit-learn | Imbalanced-learn</p>
    </div>
    """, unsafe_allow_html=True)

else:
    # Hi·ªÉn th·ªã trang ch√†o m·ª´ng khi ch∆∞a nh·∫•n n√∫t
    st.info("Vui l√≤ng c·∫•u h√¨nh c√°c t√πy ch·ªçn ·ªü thanh b√™n v√† nh·∫•n n√∫t **'Hu·∫•n luy·ªán v√† ƒê√°nh gi√°'** ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
    
    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ƒë·ªì √°n
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        ### M·ª•c ti√™u
        ·ª®ng d·ª•ng h·ªçc m√°y ƒë·ªÉ ph√°t hi·ªán gian l·∫≠n th·∫ª t√≠n d·ª•ng v√† so s√°nh hi·ªáu qu·∫£ 
        c·ªßa c√°c m√¥ h√¨nh kh√°c nhau khi x·ª≠ l√Ω d·ªØ li·ªáu m·∫•t c√¢n b·∫±ng.
        """)
    
    with col2:
        st.markdown("""
        ### Ph∆∞∆°ng ph√°p
        - **X·ª≠ l√Ω d·ªØ li·ªáu:** Oversampling, SMOTE
        - **M√¥ h√¨nh:** Logistic Regression, Decision Tree, Bayesian Network
        - **ƒê√°nh gi√°:** Confusion Matrix, Accuracy, TP, FP
        """)
    
    with col3:
        st.markdown("""
        ### D·ªØ li·ªáu
        - **Ngu·ªìn:** Kaggle
        - **Giao d·ªãch:** 284,807
        - **Gian l·∫≠n:** 492 (0.172%)
        - **ƒê·∫∑c tr∆∞ng:** 30 features (PCA transformed)
        """)
    
    st.markdown("---")
    
    # H√¨nh minh h·ªça (placeholder)
    st.image("https://cdn.prod.website-files.com/65e3b115e37b4719332ddd06/65e3b115e37b4719332de329_Fraud%20Detection%20with%20Machine%20Learning%20and%20AI.png", 
             width='stretch',
             caption="Demo ·ª©ng d·ª•ng ph√°t hi·ªán gian l·∫≠n th·∫ª t√≠n d·ª•ng")
